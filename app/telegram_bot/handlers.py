import asyncio
from datetime import datetime
from aiogram import Router, types
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from html import escape
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging
from app import crud, schemas
from app.config import SessionLocal
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from time import time
from typing import Optional

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SPAM_PROTECTION_TIMEOUT = 1.0
MESSAGE_CLEANUP_TIMEOUT = 3.0
CONFIRMATION_DISPLAY_TIME = 1.5
MAX_TASK_TITLE_LENGTH = 200


class PrivateChatFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤"""

    async def __call__(self, message: types.Message) -> bool:
        return message.chat.type == "private"


router.message.filter(PrivateChatFilter())


class AddTaskStates(StatesGroup):
    waiting_for_task_title = State()


class EditTaskStates(StatesGroup):
    waiting_for_new_title = State()


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard


def generate_task_keyboard(task) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á–∏"""
    buttons = [
        InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if not task.done else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
            callback_data=f"{'done' if not task.done else 'undone'}_{task.id}"
        ),
        InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=f"edit_{task.id}"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_{task.id}"
        )
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def generate_header_keyboard() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="list_tasks"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_task")
    ]])


def generate_task_text(task, username: str = "") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    status_icon = "‚úÖ" if task.done else "‚ùå"
    text = f"{status_icon} <b>{escape(task.title)}</b>"

    if task.done and task.done_by:
        text += f"\nüë§ <i>–í—ã–ø–æ–ª–Ω–∏–ª:</i> {escape(task.done_by)}"

    return text


async def safe_delete_message(bot, chat_id: int, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except TelegramAPIError as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        return False


async def safe_edit_message(bot, chat_id: int, message_id: int, text: str,
                            reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            return True  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        elif "message to edit not found" in str(e).lower():
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            return False
    except TelegramAPIError as e:
        logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return False


async def prevent_callback_spam(callback: types.CallbackQuery, state: FSMContext) -> bool:
    """–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ callback'–æ–≤"""
    data = await state.get_data()
    last_cb_data = data.get("last_cb_data")
    last_cb_time = data.get("last_cb_time", 0)
    now = time()

    if last_cb_data == callback.data and now - last_cb_time < SPAM_PROTECTION_TIMEOUT:
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º...", show_alert=False)
        return False

    await state.update_data(
        last_cb_data=callback.data,
        last_cb_time=now
    )
    return True


async def cleanup_state_messages(state: FSMContext, bot, chat_id: int, keys_to_cleanup: list[str]):
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    updates = {}

    for key in keys_to_cleanup:
        message_id = data.get(key)
        if message_id:
            await safe_delete_message(bot, chat_id, message_id)
            updates[key] = None

    if updates:
        await state.update_data(**updates)


@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á!</b>\n\n"
        "üìã –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    start_msg = await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

    await state.update_data(start_message_id=start_msg.message_id)


@router.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def handle_task_list_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'"""
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_msg_id = data.get("start_message_id")
    if start_msg_id:
        await safe_delete_message(message.bot, message.chat.id, start_msg_id)
        await state.update_data(start_message_id=None)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    await send_tasks_list(message, state)


@router.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def handle_add_task_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_state_messages(
        state, message.bot, message.chat.id,
        ['prompt_message_id', 'confirmation_message_id']
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    prompt_msg = await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</b>\n"
        f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode="HTML"
    )

    await state.set_state(AddTaskStates.waiting_for_task_title)
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AddTaskStates.waiting_for_task_title)
async def process_task_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    task_title = message.text.strip() if message.text else ""

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not task_title:
        await message.answer("‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.</b>", parse_mode="HTML")
        return

    if len(task_title) > MAX_TASK_TITLE_LENGTH:
        await message.answer(
            f"‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.</b>\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(task_title)}",
            parse_mode="HTML"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    try:
        with SessionLocal() as db:
            new_task = crud.create_task(
                db,
                schemas.TaskCreate(title=task_title, user_id=message.from_user.id)
            )
            db.commit()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            task_id = new_task.id
            task_title_saved = new_task.title
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await message.answer("‚ùó <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.</b>", parse_mode="HTML")
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_state_messages(
        state, message.bot, message.chat.id,
        ['prompt_message_id']
    )
    await state.clear()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation = await message.answer(
        f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b> {escape(task_title_saved)}",
        parse_mode="HTML"
    )

    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    await asyncio.sleep(CONFIRMATION_DISPLAY_TIME)
    await safe_delete_message(message.bot, message.chat.id, confirmation.message_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await send_tasks_list(message, state)


async def send_tasks_list(message: types.Message | types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    if isinstance(message, types.Message):
        user_id = message.chat.id
        bot = message.bot
    else:  # CallbackQuery
        user_id = message.message.chat.id
        bot = message.bot

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    try:
        with SessionLocal() as db:
            tasks = crud.get_tasks(db, user_id=user_id)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å DetachedInstanceError
            tasks_data = []
            for task in tasks:
                tasks_data.append({
                    'id': task.id,
                    'title': task.title,
                    'done': task.done,
                    'done_by': task.done_by
                })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        error_msg = "‚ùó <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.</b>"
        if isinstance(message, types.Message):
            await message.answer(error_msg, parse_mode="HTML")
        else:
            await message.message.answer(error_msg, parse_mode="HTML")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∑–∞–¥–∞—á
    class TempTask:
        def __init__(self, data):
            self.id = data['id']
            self.title = data['title']
            self.done = data['done']
            self.done_by = data['done_by']

    tasks = [TempTask(task_data) for task_data in tasks_data]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    task_messages = data.get("task_messages", {})
    header_message_id = data.get("header_message_id")
    chat_id = user_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    date_str = datetime.now().strftime('%d.%m.%Y')
    task_count = len(tasks)

    if task_count == 0:
        header_text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {date_str}</b>\n<i>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</i>"
    else:
        completed_count = sum(1 for task in tasks if task.done)
        header_text = (
            f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {date_str}</b>\n"
            f"üìä –í—Å–µ–≥–æ: {task_count} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}"
        )

    header_markup = generate_header_keyboard()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if header_message_id:
        if not await safe_edit_message(bot, chat_id, header_message_id, header_text, header_markup):
            header_message_id = None

    if not header_message_id:
        try:
            header = await bot.send_message(
                chat_id=chat_id,
                text=header_text,
                reply_markup=header_markup,
                parse_mode="HTML"
            )
            header_message_id = header.message_id
            await state.update_data(header_message_id=header_message_id)
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if not tasks:
        for task_id, msg_id in list(task_messages.items()):
            await safe_delete_message(bot, chat_id, msg_id)
            task_messages.pop(task_id, None)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–¥–∞—á
        await state.update_data(task_messages=task_messages)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        empty_header_text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ {date_str}</b>\n<i>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</i>"

        if header_message_id:
            await safe_edit_message(bot, chat_id, header_message_id, empty_header_text, header_markup)
        else:
            try:
                header = await bot.send_message(
                    chat_id=chat_id,
                    text=empty_header_text,
                    reply_markup=header_markup,
                    parse_mode="HTML"
                )
                await state.update_data(header_message_id=header.message_id)
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

        return

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∑–∞–¥–∞—á
    current_task_ids = set(task.id for task in tasks)
    known_task_ids = set(task_messages.keys())

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    to_delete_ids = known_task_ids - current_task_ids
    for task_id in to_delete_ids:
        msg_id = task_messages.get(task_id)
        if msg_id:
            await safe_delete_message(bot, chat_id, msg_id)
            task_messages.pop(task_id, None)

    # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á
    for task in tasks:
        task_id = task.id
        text = generate_task_text(task)
        markup = generate_task_keyboard(task)

        if task_id in task_messages:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not await safe_edit_message(bot, chat_id, task_messages[task_id], text, markup):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                try:
                    msg = await bot.send_message(
                        chat_id=chat_id,
                        text=text,
                        reply_markup=markup,
                        parse_mode="HTML"
                    )
                    task_messages[task_id] = msg.message_id
                except TelegramAPIError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                msg = await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                task_messages[task_id] = msg.message_id
            except TelegramAPIError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(task_messages=task_messages)


async def update_task_message(callback: types.CallbackQuery, task_id: int, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        with SessionLocal() as db:
            task = crud.get_task(db, task_id)
            if not task:
                await callback.answer("‚ùó –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            task_data = {
                'id': task.id,
                'title': task.title,
                'done': task.done,
                'done_by': task.done_by
            }

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        class TempTask:
            def __init__(self, data):
                self.id = data['id']
                self.title = data['title']
                self.done = data['done']
                self.done_by = data['done_by']

        temp_task = TempTask(task_data)
        new_text = generate_task_text(temp_task)
        new_markup = generate_task_keyboard(temp_task)

        await safe_edit_message(
            callback.bot,
            callback.message.chat.id,
            callback.message.message_id,
            new_text,
            new_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")


@router.callback_query(lambda c: c.data == "list_tasks")
async def inline_list_tasks(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    if not await prevent_callback_spam(callback, state):
        return

    await send_tasks_list(callback, state)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(lambda c: c.data.startswith("done_"))
async def inline_done_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    if not await prevent_callback_spam(callback, state):
        return

    try:
        task_id = int(callback.data.split("_")[1])

        with SessionLocal() as db:
            user = callback.from_user
            username = f"@{user.username}" if user.username else user.full_name
            crud.mark_task_done(db, task_id, done_by=username)
            db.commit()

        await update_task_message(callback, task_id, state)
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!")

    except (ValueError, IndexError):
        await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: {e}")
        await callback.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("undone_"))
async def inline_undone_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    if not await prevent_callback_spam(callback, state):
        return

    try:
        task_id = int(callback.data.split("_")[1])

        with SessionLocal() as db:
            crud.mark_task_undone(db, task_id)
            db.commit()

        await update_task_message(callback, task_id, state)
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")

    except (ValueError, IndexError):
        await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task_id} –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: {e}")
        await callback.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def inline_delete_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not await prevent_callback_spam(callback, state):
        return

    try:
        task_id = int(callback.data.split("_")[1])

        with SessionLocal() as db:
            task = crud.get_task(db, task_id)
            if not task:
                await callback.answer("‚ùó –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return

            task_title = task.title
            crud.delete_task(db, task_id)
            db.commit()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        data = await state.get_data()
        task_messages = data.get("task_messages", {})

        if task_id in task_messages:
            await safe_delete_message(
                callback.bot,
                callback.message.chat.id,
                task_messages[task_id]
            )
            task_messages.pop(task_id, None)
            await state.update_data(task_messages=task_messages)

        await callback.answer(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_title}")

    except (ValueError, IndexError):
        await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await callback.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_task_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not await prevent_callback_spam(callback, state):
        return

    try:
        task_id = int(callback.data.split("_")[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        with SessionLocal() as db:
            task = crud.get_task(db, task_id)
            if not task:
                await callback.answer("‚ùó –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
                return

        await state.set_state(EditTaskStates.waiting_for_new_title)

        prompt_msg = await callback.message.answer(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {escape(task.title)}\n\n"
            f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
            f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode="HTML"
        )

        await state.update_data(
            task_id=task_id,
            message_id=callback.message.message_id,
            prompt_message_id=prompt_msg.message_id
        )

        await callback.answer("‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")

    except (ValueError, IndexError):
        await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)


@router.message(EditTaskStates.waiting_for_new_title)
async def process_edit_task(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    new_title = message.text.strip() if message.text else ""
    data = await state.get_data()
    task_id = data.get("task_id")
    message_id = data.get("message_id")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not new_title:
        await message.answer("‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.</b>", parse_mode="HTML")
        return

    if len(new_title) > MAX_TASK_TITLE_LENGTH:
        await message.answer(
            f"‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.</b>\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(new_title)}",
            parse_mode="HTML"
        )
        return

    try:
        with SessionLocal() as db:
            task = crud.get_task(db, task_id)
            if not task:
                await message.answer("‚ùó <b>–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>", parse_mode="HTML")
                return

            crud.update_task(db, task_id, schemas.TaskUpdate(title=new_title))
            db.commit()
            updated_task = crud.get_task(db, task_id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await cleanup_state_messages(
            state, message.bot, message.chat.id,
            ['prompt_message_id']
        )
        await state.clear()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if message_id and updated_task:
            new_text = generate_task_text(updated_task)
            new_markup = generate_task_keyboard(updated_task)
            await safe_edit_message(
                message.bot, message.chat.id, message_id,
                new_text, new_markup
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await safe_delete_message(message.bot, message.chat.id, message.message_id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = await message.answer(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {escape(new_title)}",
            parse_mode="HTML"
        )

        await asyncio.sleep(CONFIRMATION_DISPLAY_TIME)
        await safe_delete_message(message.bot, message.chat.id, confirmation.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await message.answer("‚ùó <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.</b>", parse_mode="HTML")


@router.callback_query(lambda c: c.data == "add_task")
async def inline_add_task(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if not await prevent_callback_spam(callback, state):
        return

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await cleanup_state_messages(
        state, callback.bot, callback.message.chat.id,
        ['prompt_message_id', 'confirmation_message_id']
    )

    prompt = await callback.message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:</b>\n"
        f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
        parse_mode="HTML"
    )

    await state.set_state(AddTaskStates.waiting_for_task_title)
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer("üìù –ì–æ—Ç–æ–≤ –∫ –≤–≤–æ–¥—É –∑–∞–¥–∞—á–∏!")


@router.message(Command("clear"))
async def clear_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header_message_id = data.get("header_message_id")
    if header_message_id:
        await safe_delete_message(message.bot, message.chat.id, header_message_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–¥–∞—á
    task_messages = data.get("task_messages", {})
    for task_id, msg_id in task_messages.items():
        await safe_delete_message(message.bot, message.chat.id, msg_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_msg_id = data.get("start_message_id")
    if start_msg_id:
        await safe_delete_message(message.bot, message.chat.id, start_msg_id)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await start_command(message, state)


@router.message(Command("refresh"))
async def refresh_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await safe_delete_message(message.bot, message.chat.id, message.message_id)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    header_message_id = data.get("header_message_id")
    if header_message_id:
        await safe_delete_message(message.bot, message.chat.id, header_message_id)

    task_messages = data.get("task_messages", {})
    for task_id, msg_id in task_messages.items():
        await safe_delete_message(message.bot, message.chat.id, msg_id)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        header_message_id=None,
        task_messages={}
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await send_tasks_list(message, state)


@router.message(Command("list_tasks"))
async def list_tasks_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_tasks"""
    await send_tasks_list(message, state)

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_task"""
    parts = message.text.split(maxsplit=1)

    if len(parts) > 1:
        task_title = parts[1].strip()

        if not task_title:
            await message.answer("‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.</b>", parse_mode="HTML")
            return

        if len(task_title) > MAX_TASK_TITLE_LENGTH:
            await message.answer(
                f"‚ùó <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, —É –≤–∞—Å: {len(task_title)}",
                parse_mode="HTML"
            )
            return

        try:
            with SessionLocal() as db:
                new_task = crud.create_task(
                    db,
                    schemas.TaskCreate(title=task_title, user_id=message.from_user.id)
                )
                db.commit()
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
                task_id = new_task.id
                task_title_saved = new_task.title

            await message.answer(
                f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b> {escape(task_title_saved)}\n"
                f"<i>ID: {task_id}</i>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
            await message.answer("‚ùó <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.</b>", parse_mode="HTML")
    else:
        prompt_msg = await message.answer(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"
            f"<i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {MAX_TASK_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤</i>",
            parse_mode="HTML"
        )
        await state.set_state(AddTaskStates.waiting_for_task_title)
        await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message()
async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()

    if current_state in [AddTaskStates.waiting_for_task_title, EditTaskStates.waiting_for_new_title]:
        return

    help_text = (
        "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /list_tasks - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚Ä¢ /refresh - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "üîò –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:"
    )

    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
