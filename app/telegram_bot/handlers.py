from aiogram import Router, types
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from html import escape
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold

from app import crud, schemas
from app.config import SessionLocal

router = Router()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)


class PrivateChatFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return message.chat.type == "private"


router.message.filter(PrivateChatFilter())


class AddTaskStates(StatesGroup):
    waiting_for_task_title = State()


class EditTaskStates(StatesGroup):
    waiting_for_new_title = State()


class DeleteStates(StatesGroup):
    waiting_for_task_id = State()


@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å –∑–∞–¥–∞—á–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )


@router.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def handle_task_list_button(message: types.Message, state: FSMContext):
    await list_tasks_handler(message, state)


@router.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def handle_add_task_button(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTaskStates.waiting_for_task_title)


@router.message(AddTaskStates.waiting_for_task_title)
async def process_task_title(message: types.Message, state: FSMContext):
    task_title = escape(message.text.strip())
    if not task_title:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    db = SessionLocal()
    try:
        new_task = crud.create_task(db, schemas.TaskCreate(title=task_title, user_id=message.from_user.id))
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_task.id}")
    finally:
        db.close()

    await state.clear()


async def send_tasks_list(message: types.Message | types.CallbackQuery, state: FSMContext = None):
    db = SessionLocal()
    try:
        user_id = message.from_user.id if isinstance(message, types.Message) else message.message.chat.id
        username = message.from_user.username if isinstance(message, types.Message) else message.from_user.username
        tasks = crud.get_tasks(db, user_id=user_id)

        if state:
            data = await state.get_data()
            old_msgs: list[int] = data.get("last_messages", [])
            for msg_id in old_msgs:
                try:
                    await message.bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception:
                    pass

        sent_ids = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_tasks")]
            ]
        )
        header = await message.bot.send_message(chat_id=user_id, text=f"üë§ {username}", reply_markup=refresh_keyboard)
        sent_ids.append(header.message_id)

        if not tasks:
            msg = await message.bot.send_message(chat_id=user_id, text="üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            sent_ids.append(msg.message_id)
        else:
            for task in tasks:
                status_icon = "‚úÖ" if task.done else "‚ùå"
                text = f"{status_icon} {escape(task.title)}"
                buttons = InlineKeyboardMarkup(inline_keyboard=[[  # –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
                    InlineKeyboardButton(
                        text="‚úÖ" if not task.done else "‚ùå",
                        callback_data=f"{'done' if not task.done else 'undone'}_{task.id}"
                    ),
                    InlineKeyboardButton(text="‚úè", callback_data=f"edit_{task.id}"),
                    InlineKeyboardButton(text="üóë", callback_data=f"delete_{task.id}")
                ]])
                msg = await message.bot.send_message(chat_id=user_id, text=text, reply_markup=buttons)
                sent_ids.append(msg.message_id)

        if state:
            await state.update_data(last_messages=sent_ids)

    finally:
        db.close()


@router.message(Command("list_tasks"))
async def list_tasks_handler(message: types.Message, state: FSMContext):
    await send_tasks_list(message, state)


@router.callback_query(lambda c: c.data == "list_tasks")
async def inline_list_tasks(callback: types.CallbackQuery, state: FSMContext):
    await send_tasks_list(callback, state)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("done_"))
async def inline_done_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    try:
        crud.mark_task_done(db, task_id)
    finally:
        db.close()
    await inline_list_tasks(callback)
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!")


@router.callback_query(lambda c: c.data.startswith("undone_"))
async def inline_undone_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    try:
        crud.mark_task_undone(db, task_id)
    finally:
        db.close()
    await inline_list_tasks(callback)
    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def inline_delete_handler(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    try:
        crud.delete_task(db, task_id)
    finally:
        db.close()
    await inline_list_tasks(callback)
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")


@router.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_task_handler(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    await state.set_state(EditTaskStates.waiting_for_new_title)
    await state.update_data(task_id=task_id)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await callback.answer()


@router.message(EditTaskStates.waiting_for_new_title)
async def process_edit_task(message: types.Message, state: FSMContext):
    new_title = escape(message.text.strip())
    data = await state.get_data()
    task_id = data.get("task_id")

    db = SessionLocal()
    try:
        crud.update_task(db, task_id, schemas.TaskUpdate(title=new_title))
    finally:
        db.close()

    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()


@router.message(Command("add_task"))
async def add_task_handler(message: types.Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)

    if len(parts) > 1:
        task_title = escape(parts[1].strip())
        if not task_title:
            await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        db = SessionLocal()
        try:
            new_task = crud.create_task(db, schemas.TaskCreate(title=task_title, user_id=message.from_user.id))
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_task.id}")
        finally:
            db.close()
    else:
        await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        await state.set_state(AddTaskStates.waiting_for_task_title)


@router.callback_query(lambda c: c.data.startswith("toggle_"))
async def toggle_task_status(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    db = SessionLocal()
    try:
        task = crud.get_task(db, task_id)
        if task.done:
            crud.mark_task_undone(db, task_id)
        else:
            crud.mark_task_done(db, task_id)
    finally:
        db.close()
    await inline_list_tasks(callback)
    await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω!")


@router.message(EditTaskStates.waiting_for_new_title)
async def process_edit_task(message: types.Message, state: FSMContext):
    new_title = escape(message.text.strip())
    data = await state.get_data()
    task_id = data.get("task_id")

    db = SessionLocal()
    try:
        crud.update_task(db, task_id, schemas.TaskUpdate(title=new_title))
    finally:
        db.close()

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º msg_id)
    try:
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply_to_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:"
    except Exception:
        pass  # –ë–µ–∑ –ø–∞–Ω–∏–∫–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    await state.clear()

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    await send_tasks_list(message)

    # –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=False)
